#!/bin/bash

# Check for arguments
if [ "$#" -eq 0 ] ; then
  echo "Usage: $0 url" >&2
  exit 1
fi

checked=()
output_links=()

root_url="$1"

url="$1"

url_regex='(https?:\/\/[^\/"]+\/)?([^\/"]+)'
if [[ $root_url =~ $url_regex ]]; then
	baseurl="${BASH_REMATCH[1]}"
	label="${BASH_REMATCH[2]}"
fi
filename="blr-$label.html"
debugfile="blr-$label-debug-log"
if [ -e ./"$filename" ]; then
	rm -f $filename
fi

if [ -e ./"$debugfile" ]; then
	rm -f $debugfile
fi

touch $filename
touch $debugfile

echo "Root Url: $root_url" >> $debugfile
tmp=${baseurl%/*}
echo "Base Url: $tmp" >> $debugfile
echo "Label Url: $label" >> $debugfile 
echo "================================" >> $debugfile
get_anchor_tags() {

	local links=$(curl -s "$url" |
		  grep -oE '<a [^>]*href="https?://[^"]+"[^>]*>' |
		  sed -E 's/.*href="([^"]+)".*/\1/')

	echo "$links"
}

get_image_tags() {

	local links=$(curl -s "$1" |
		  grep -oE '<img [^>]*src="[^"]+"[^>]*>' |
		  sed -E 's/.*src="([^"]+)".*/\1/')

	echo "$links"

}

checks_links() {

	local url="$1"

	links=`get_anchor_tags`
	
	while read -r link; do
			
		found=false
		# Check to see if we've already looked at this url. 
		for i in "${checked[@]}"; do
			# If we find a url that matches the one we're checking
			if [[ $i == $link ]]; then
				found=true
				break;
			fi		  
		done

		# We haven't seen this link before, so we can check it. 
		if [ $found == false ]; then



			images=`get_image_tags $link`
			echo "" >> $debugfile
			echo "$images" >> $debugfile
			echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~" >> $debugfile
			while read -r image; do
				echo "$image" >> $debugfile
				if [[ $image =~ $url_regex ]]; then
					# We're only interested in internally-linking images. 
					if [[ ${BASH_REMATCH[1]} == "" ]]; then
						image_url="$tmp$image"
						
						status=$(curl -o /dev/null -s -w "%{http_code}\n" "$image_url")
						
						if [[ "$status" != "404" ]]; then
							html="<li><span class='type'>IMAGE</span> <span class='link'>$image_url</span> <span class='status'>$status</span> <span class='result'>PASS</span></li>"
							#text="IMAGE $image_url $status PASS"
							#output_links+=("$text")
							output_links+=("$html")
						else
							html="<li><span class='type'>IMAGE</span> <span class='link'>$image_url</span> <span class='status'>$status</span> <span class='result-bad'>BAD</span></li>"
							output_links+=("$html")
						fi


					fi
				fi
			done <<< "$images"

			
			checked+=("$link")

			# We want to know the status code of the response
			status=$(curl -o /dev/null -s -w "%{http_code}\n" "$link")

			if [[ "$status" != "404" ]]; then
				#echo "$link is valid"
				html="<li><span class='type'>LINK</span><span class='link'>$link</span><span class='status'>$status</span><span class='result'>PASS</span></li>"
				link_text="LINK $link $status PASS"
				output_links+=("$html")
				# If we're looking at an internal link, lets get all ITS links. 
				if echo "$link" | grep -q "$root_url"; then
					checks_links "$link"
				fi
			else
				html="<li><span class='type'>LINK</span><span class='link'>$link</span><span class='status'>$status</span><span class='result-bad'>BAD</span></li>"
				output_links+=("$html")
			fi
		fi
		
	done <<< "$links"

}
echo "<!DOCTYPE html>" >> $filename
echo "<html>" >> $filename

echo "<head><meta charset='UTF-8'>" >> $filename

echo "<style>" >> $filename
echo ".result {color: green;} span {margin:0 7px;} .result-bad {color: red;} ul {list-style-type: none;}" >> $filename
echo "#header {color: red;}" >> $filename
echo "</style>" >> $filename
echo "</head>" >> $filename
echo "</body>" >> $filename
echo "<div id='header'><h1>Boston University</h1></div>" >> $filename
echo "<div><ul>" >> $filename

checks_links "$root_url"



for i in "${output_links[@]}"; do

	echo "${i}" >> $filename
done

echo "</ul></div>" >> $filename
echo "</body>" >> $filename

wkhtmltopdf $filename "$label.pdf"

exit 0
