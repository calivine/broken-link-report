#!/bin/bash

# Check for arguments
if [ "$#" -eq 0 ] ; then
  echo "Usage: $0 url" >&2
  exit 1
fi

checked=()
valid_links=()
broken_links=()

root_url="$1"

url="$1"

url_regex='(https?:\/\/[^\/"]+\/)?([^\/"]+)'
if [[ $root_url =~ $url_regex ]]; then
	baseurl="${BASH_REMATCH[1]}"
	label="${BASH_REMATCH[2]}"
fi

touch "broken-link-report-$label"

echo "Target Url: $root_url" >> "broken-link-report-$label"

echo "$baseurl" >> "broken-link-report-$label"

get_anchor_tags() {

	local links=$(curl -s "$url" |
		  grep -oE '<a [^>]*href="https?://[^"]+"[^>]*>' |
		  sed -E 's/.*href="([^"]+)".*/\1/')

	echo "$links"
}

get_image_tags() {

	local links=$(curl -s "$1" |
		  grep -oE '<img [^>]*src="[^"]+"[^>]*>' |
		  sed -E 's/.*src="([^"]+)".*/\1/')

	echo "$links"

}

checks_links() {

	local url="$1"

	links=`get_anchor_tags`
	
	while read -r link; do
			
		found=false
		# Check to see if we've already looked at this url. 
		for i in "${checked[@]}"; do
			# If we find a url that matches the one we're checking
			if [[ $i == $link ]]; then
				found=true
				break;
			fi		  
		done

		# We haven't seen this link before, so we can check it. 
		if [ $found == false ]; then

			images=`get_image_tags $link`

			while read -r image; do
				if [[ $image =~ $url_regex ]]; then
					
					if [[ ${BASH_REMATCH[1]} == "" ]]; then
						
						image_url="$baseurl$image"
						status=$(curl -o /dev/null -s -w "%{http_code}\n" "$image_url")
						
						if [[ "$status" != "404" ]]; then

							valid_links+=("$image_url - IMAGE : $status")
						else
							broken_links+=("$baseurl$image - IMAGE : $status")
						fi


					fi
				fi
			done <<< "$images"

			
			checked+=("$link")

			# We want to know the status code of the response
			status=$(curl -o /dev/null -s -w "%{http_code}\n" "$link")

			if [[ "$status" != "404" ]]; then
				#echo "$link is valid"
				valid_links+=("$link - LINK : $status")
				# If we're looking at an internal link, lets get all ITS links. 
				if echo "$link" | grep -q "$root_url"; then
					checks_links "$link"
				fi
			else
				broken_links+=("$link")
			fi
		fi
		
	done <<< "$links"

}


checks_links "$root_url"


for i in "${valid_links[@]}"; do

	echo "${i} - PASS" >> "broken-link-report-$label"
done

for i in "${broken_links[@]}"; do

	echo "${i} - BAD" >> "broken-link-report-$label"
done

exit 0
